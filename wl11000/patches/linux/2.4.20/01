Patch for Linux 2.4.20-rc1.
--- linux.orig/Documentation/Configure.help
+++ linux/Documentation/Configure.help
@@ -4176,6 +4176,18 @@
   Select this for a Pentium Classic processor with the RDTSC (Read
   Time Stamp Counter) instruction for benchmarking.
 
+Eutmicom WL11000 SA-N
+CONFIG_WL11000
+ Select this if your target is a Eumitcom WL11000SA-N Access Point.
+ These are resold as:
+ - US Robotics (USR 2450) (tested)
+ - SMC 2652W EZconnect Wireless AP (tested)
+ - Addtron AWS-100 (not tested)
+
+ There may be others that are based on the same board.
+
+ If unsure, say N.
+
 32-bit PDC
 CONFIG_PDC_NARROW
   Saying Y here will allow developers with a C180, C200, C240, C360,
--- linux.orig/arch/i386/Makefile
+++ linux/arch/i386/Makefile
@@ -98,6 +98,11 @@
 DRIVERS += arch/i386/math-emu/math.o
 endif
 
+ifdef CONFIG_WL11000
+SUBDIRS += arch/i386/wl11000
+CORE_FILES := $(CORE_FILES) arch/i386/wl11000/wl11000.o
+endif
+
 arch/i386/kernel: dummy
 	$(MAKE) linuxsubdirs SUBDIRS=arch/i386/kernel
 
--- linux.orig/arch/i386/config.in
+++ linux/arch/i386/config.in
@@ -179,6 +179,10 @@
 
 bool 'Machine Check Exception' CONFIG_X86_MCE
 
+if [ "$CONFIG_MELAN" = "y" ]; then
+   bool 'WL11000 SA-1 support' CONFIG_WL11000
+fi
+
 tristate 'Toshiba Laptop support' CONFIG_TOSHIBA
 tristate 'Dell laptop support' CONFIG_I8K
 
--- linux.orig/arch/i386/kernel/i386_ksyms.c
+++ linux/arch/i386/kernel/i386_ksyms.c
@@ -28,6 +28,9 @@
 #include <asm/desc.h>
 #include <asm/pgtable.h>
 #include <asm/pgalloc.h>
+#ifdef CONFIG_WL11000
+#include <asm/wl11000.h>
+#endif
 
 extern void dump_thread(struct pt_regs *, struct user *);
 extern spinlock_t rtc_lock;
@@ -162,6 +165,10 @@ EXPORT_SYMBOL(get_wchan);
 
 EXPORT_SYMBOL(rtc_lock);
 
+#ifdef CONFIG_WL11000
+EXPORT_SYMBOL(wl11000_set_led);
+#endif
+
 #undef memcpy
 #undef memset
 extern void * memset(void *,int,__kernel_size_t);
--- /dev/null
+++ linux/arch/i386/wl11000/Makefile
@@ -0,0 +1,14 @@
+#
+# Makefile for Linux arch/i386/wl11000 source directory
+#
+# Note! Dependencies are done automagically by 'make dep', which also
+# removes any old dependencies. DON'T put your own dependencies here
+# unless it's something special (ie not a .c file).
+#
+# Note 2! The CFLAGS definitions are now in the main makefile...
+
+O_TARGET := wl11000.o
+
+obj-y := config.o watchdog.o led.o
+
+include $(TOPDIR)/Rules.make
--- /dev/null
+++ linux/arch/i386/wl11000/config.c
@@ -0,0 +1,38 @@
+/*
+   linux/arch/i386/wl11000/config.c
+
+   Initialize wl11000SA.
+
+   Copyright (C) 2001-2002 Instant802 Networks Inc. , All Rights Reserved.
+
+   This program is free software; you can redistribute it and/or modify it
+   under the terms of the GNU General Public License as published by the Free
+   Software Foundation; either version 2 of the License, or (at your option)
+   any later version.
+
+   David Kimdon <dwhedon@instant802.com>, January 15, 2001:
+     - Initial distribution.
+
+*/
+
+#include <linux/init.h>
+#include <linux/spinlock.h>
+#include <linux/time.h>
+
+extern int wl11000_led_init(void);
+extern int wl11000_watchdog_init(void);
+
+spinlock_t wl11000_io_lock = SPIN_LOCK_UNLOCKED;
+
+void __init wl11000_config(void) {
+	struct timeval tv;
+
+	/* We don't have a RTC on board.  The kernel doesn't know that and
+	 * gets a bogus value for the current time. Zero it. */
+	tv.tv_sec = 0;
+	tv.tv_usec = 0;
+	do_settimeofday(&tv);
+
+	wl11000_led_init();
+	wl11000_watchdog_init();
+}
--- /dev/null
+++ linux/arch/i386/wl11000/led.c
@@ -0,0 +1,139 @@
+/*
+   linux/arch/i386/wl11000/led.c
+
+   led driver for wl11000SA.
+
+   Copyright (C) 2001-2002 Instant802 Networks Inc. , All Rights Reserved.
+
+   This program is free software; you can redistribute it and/or modify it
+   under the terms of the GNU General Public License as published by the Free
+   Software Foundation; either version 2 of the License, or (at your option)
+   any later version.
+
+   This driver controls the two GPIO connected LEDs on the wl11000SA board :
+   wireless activity and wireless link.
+
+   There are three other LEDs that we don't touch : power, ethernet link and
+   ethernet activity.
+
+   David Kimdon <dwhedon@instant802.com>, January 15, 2001:
+     - Initial distribution.
+
+*/
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <asm/io.h>
+#include <linux/timer.h>
+#include <asm/wl11000.h>
+
+#define LED_BR_DELAY (HZ/2)
+#define LED_RX 0x04
+#define LED_BR 0x08
+
+static int led_initialized = 0;
+
+static struct timer_list led_timer;
+static int led_br_blinking = 0;
+
+
+void wl11000_set_led(unsigned int state)
+{
+	u16 leds = 0;
+	unsigned long flags;
+
+	if (!led_initialized)
+		return;
+
+	spin_lock_irqsave(&wl11000_io_lock, flags);
+	outb(0xa8, 0x22);
+	leds = 0xFF & inb(0x23);
+	spin_unlock_irqrestore(&wl11000_io_lock, flags);
+
+	switch (state) {
+
+	case WL11000_LED_RX_ON:
+		leds |= LED_RX;
+		break;
+
+	case WL11000_LED_RX_OFF:
+		leds &= ~LED_RX;
+		break;
+
+	case WL11000_LED_BR_ON:
+		led_br_blinking = 0;
+		del_timer_sync(&led_timer);
+		leds |= LED_BR;
+		break;
+
+	case WL11000_LED_BR_OFF:
+		led_br_blinking = 0;
+		del_timer_sync(&led_timer);
+		leds &= ~LED_BR;
+		break;
+
+	case WL11000_LED_BR_BLINK:
+		if (!led_br_blinking) {
+			led_br_blinking = 1;
+			led_timer.expires = jiffies + LED_BR_DELAY;
+			add_timer(&led_timer);
+		}
+		break;
+	}
+
+	outw(0xa8 | (leds << 8), 0x22);
+}
+
+
+
+static void led_br_blink(unsigned long unused)
+{
+	unsigned char led;
+	unsigned long flags;
+
+	spin_lock_irqsave(&wl11000_io_lock, flags);
+	outb(0xa8, 0x22);
+	led = inb(0x23);
+	spin_unlock_irqrestore(&wl11000_io_lock, flags);
+
+	if (led & LED_BR)
+		led &= ~LED_BR;
+	else
+		led |= LED_BR;
+
+	outw(0xa8 | (led << 8), 0x22);
+
+	if (led_br_blinking) {
+		led_timer.expires = jiffies + LED_BR_DELAY;
+		add_timer(&led_timer);
+	}
+}
+
+
+int __init wl11000_led_init(void)
+{
+	wl11000_set_led(WL11000_LED_RX_OFF);
+	wl11000_set_led(WL11000_LED_BR_OFF);
+
+	init_timer(&led_timer);
+	led_timer.function = led_br_blink;
+	led_timer.data = 0;
+
+	led_br_blinking = 0;
+	led_initialized = 1;
+
+	return 0;
+}
+
+static void __exit wl11000_led_cleanup(void)
+{
+	wl11000_set_led(WL11000_LED_RX_OFF);
+	wl11000_set_led(WL11000_LED_BR_OFF);
+	led_br_blinking = 0;
+	del_timer(&led_timer);
+}
+
+module_init(wl11000_led_init);
+module_exit(wl11000_led_cleanup);
--- /dev/null
+++ linux/arch/i386/wl11000/watchdog.c
@@ -0,0 +1,234 @@
+/*
+   linux/arch/i386/wl11000/watchdog.c
+
+   Watchdog driver for wl11000SA.
+
+   Copyright (C) 2001-2002 Instant802 Networks Inc. , All Rights Reserved.
+
+   This program is free software; you can redistribute it and/or modify it
+   under the terms of the GNU General Public License as published by the Free
+   Software Foundation; either version 2 of the License, or (at your option)
+   any later version.
+
+   The underlying watchdog is a Microchip Technology Inc. TC1232.  The TC1232
+   is connected to GPIO 30 (watchdog enable/disable) and 31 (watchdog clock).
+   The watchdog is disabled by the bootloader and enabeld here.  When the
+   watchdog is enabled (GPIO 31 = 1) the clock (GPIO 31) needs to be toggled
+   every 600 ms.
+
+   This driver is a combination of a software and a hardware watchdog.  This
+   allows us to monitor userspace without imposing timing requirements on it
+   that it can't commit to.  At very small intervals wl11000_watchdog_ack() is
+   called.  It considers whether or not we should ack the hardware watchdog.
+   If we have heard from userspace recently we'll ack the watchdog, otherwise
+   we don't and allow the machine to reboot.
+
+   To disable the watchdog (for example while reflashing the unit) an ioctl is
+   available.
+
+   David Kimdon <dwhedon@instant802.com>, January 15, 2001:
+     - Initial distribution.
+
+*/
+
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/timer.h>
+#include <linux/module.h>
+#include <linux/fs.h>
+#include <linux/miscdevice.h>
+#include <linux/watchdog.h>
+
+#include <asm/uaccess.h>
+#include <asm/io.h>
+#include <asm/wl11000.h>
+
+#define OUR_NAME "wl11000 watchdog"
+#define KERNELSPACE_PERIOD (HZ/20)
+#define USERSPACE_PERIOD (HZ * 60)
+
+#define CONFIG_WATCHDOG_NOWAYOUT 1
+
+/*
+ Cutoff for the next userspace ping.  If we don't get something in time we'll
+ allow the hardware watchdog to reboot us.
+*/
+static unsigned long next_userspace;
+
+static unsigned int watchdog_enabled = 0;
+static unsigned int watchdog_is_open = 0;
+static struct timer_list watchdog_timer;
+
+
+static inline void watchdog_schedule_ack(void)
+{
+	watchdog_timer.expires = jiffies + KERNELSPACE_PERIOD;
+	add_timer(&watchdog_timer);
+}
+
+
+void wl11000_watchdog_ack(unsigned long reschedule)
+{
+	unsigned long flags;
+	unsigned int dog;
+
+	if (watchdog_enabled) {
+
+		if (time_before(jiffies, next_userspace)) {
+			spin_lock_irqsave(&wl11000_io_lock, flags);
+			outb(0xa9, 0x22);
+			dog = 0xFF & inb(0x23);
+			spin_unlock_irqrestore(&wl11000_io_lock, flags);
+
+			if (dog & 0x80) {
+				outw(0x40a9, 0x22);
+			} else {
+				outw(0xC0a9, 0x22);
+			}
+
+		} else {
+			printk(OUR_NAME
+			       ": userspace ping not received.\n");
+		}
+
+		if (reschedule) {
+			watchdog_schedule_ack();
+		}
+	}
+}
+
+
+static ssize_t watchdog_write(struct file *file, const char *inbuf,
+			      size_t size, loff_t * off)
+{
+	if (size) {
+		next_userspace = jiffies + USERSPACE_PERIOD;
+		return 1;
+	}
+	return 0;
+}
+
+
+static void watchdog_enable(void)
+{
+	next_userspace = jiffies + USERSPACE_PERIOD;
+	watchdog_enabled = 1;
+	watchdog_schedule_ack();
+	outw(0x40a9, 0x22);	/* enable hardware watchdog */
+	printk(KERN_INFO OUR_NAME
+	       ": enabled. userspace %d s, kernelspace %d ms.\n",
+	       USERSPACE_PERIOD / HZ, KERNELSPACE_PERIOD * 1000 / HZ);
+}
+
+static int watchdog_open(struct inode *inode, struct file *file)
+{
+	switch (MINOR(inode->i_rdev)) {
+	case WATCHDOG_MINOR:
+		if (watchdog_is_open) {
+			return -EBUSY;
+		}
+
+		if (!watchdog_enabled) {
+			watchdog_enable();
+		}
+		watchdog_is_open = 1;
+		MOD_INC_USE_COUNT;
+		break;
+	default:
+		return -ENODEV;
+	}
+	return 0;
+}
+
+
+/*
+   If the watchdog is already disabled when the device is closed (presumably
+   because someone used the WDIOS_DISABLECARD ioctl) we don't touch the state
+   of the watchdog.  This way even if CONFIG_WATCHDOG_NOWAYOUT is defined it is
+   possible to disable the watchdog once it has been enabled, but it isn't as
+   simple as just closing the device.
+*/
+static int watchdog_release(struct inode *inode, struct file *file)
+{
+	if (MINOR(inode->i_rdev) == WATCHDOG_MINOR) {
+		if (watchdog_enabled) {
+			watchdog_enabled = 0;
+			del_timer_sync(&watchdog_timer);
+#ifndef CONFIG_WATCHDOG_NOWAYOUT
+			outw(0x80a9, 0x22);	/* disable hardware watchdog */
+			printk(KERN_INFO OUR_NAME ": disabled.\n");
+#endif
+		}
+		watchdog_is_open = 0;
+		MOD_DEC_USE_COUNT;
+	}
+	return 0;
+}
+
+static int watchdog_ioctl(struct inode *inode, struct file *file,
+			  unsigned int cmd, unsigned long arg)
+{
+	int rv;
+
+	switch (cmd) {
+
+	default:
+		return -ENOTTY;
+
+	case WDIOC_SETOPTIONS:
+		if (copy_from_user(&rv, (int *) arg, sizeof(int)))
+			return -EFAULT;
+
+		if (rv & WDIOS_DISABLECARD) {
+			if (watchdog_enabled) {
+				watchdog_enabled = 0;
+				del_timer_sync(&watchdog_timer);
+				outw(0x80a9, 0x22);	/* disable hardware watchdog */
+				printk(KERN_INFO OUR_NAME ": disabled.\n");
+			}
+		}
+
+		if (rv & WDIOS_ENABLECARD) {
+			if (!watchdog_enabled) {
+				watchdog_enable();
+			}
+		}
+		return 0;
+	}
+
+}
+
+
+struct file_operations watchdog_fops = {
+	write:watchdog_write,
+	open:watchdog_open,
+	release:watchdog_release,
+	ioctl:watchdog_ioctl,
+};
+
+
+static struct miscdevice watchdog_miscdev = {
+	WATCHDOG_MINOR,
+	"watchdog",
+	&watchdog_fops
+};
+
+
+int __init wl11000_watchdog_init(void)
+{
+	misc_register(&watchdog_miscdev);
+	init_timer(&watchdog_timer);
+	watchdog_timer.function = wl11000_watchdog_ack;
+	watchdog_timer.data = 1;
+
+	return 0;
+}
+
+
+void __exit wl11000_watchdog_cleanup(void)
+{
+	misc_deregister(&watchdog_miscdev);
+}
+
+module_init(wl11000_watchdog_init);
+module_exit(wl11000_watchdog_cleanup);
--- linux.orig/drivers/mtd/chips/cfi_cmdset_0002.c
+++ linux/drivers/mtd/chips/cfi_cmdset_0002.c
@@ -331,6 +331,7 @@ static int do_write_oneword(struct map_i
 	struct cfi_private *cfi = map->fldrv_priv;
 	DECLARE_WAITQUEUE(wait, current);
 	int ret = 0;
+	int tries_left = 5;
 
  retry:
 	cfi_spin_lock(chip->mutex);
@@ -395,6 +396,15 @@ static int do_write_oneword(struct map_i
 		printk(KERN_WARNING "Last[%ld] is %x, datum is %x\n",(Count - 1) % 4,Last[(Count - 1) % 4],datum);
 	        cfi_send_gen_cmd(0xF0, 0, chip->start, map, cfi, cfi->device_type, NULL);
 		DISABLE_VPP(map);
+		if (tries_left > 0) { // dave
+			printk(KERN_WARNING "mtd lowlevel write error: %d retries left: retrying\n", tries_left);
+			ret = 0;
+			tries_left--;
+			chip->state = FL_READY;
+			cfi_spin_unlock(chip->mutex);
+			cfi_udelay(10);
+			goto retry;
+		}
 		ret = -EIO;
 	}       
 	DISABLE_VPP(map);
@@ -589,7 +599,7 @@ static inline int do_erase_oneblock(stru
 	timeo = jiffies + (HZ*20);
 
 	cfi_spin_unlock(chip->mutex);
-	schedule_timeout(HZ);
+	schedule_timeout(HZ/5);
 	cfi_spin_lock(chip->mutex);
 	
 	rdy_mask = CMD(0x80);
--- linux.orig/drivers/mtd/chips/jedec_probe.c
+++ linux/drivers/mtd/chips/jedec_probe.c
@@ -26,6 +26,7 @@
 #define MANUFACTURER_ST		0x0020
 #define MANUFACTURER_SST	0x00BF
 #define MANUFACTURER_TOSHIBA	0x0098
+#define MANUFACTURER_MACRONIX   0x00C2
 
 /* AMD */
 #define AM29F800BB	0x2258
@@ -56,6 +57,10 @@
 #define TC58FVT160	0x00C2
 #define TC58FVB160	0x0043
 
+/* Macronix */
+#define MX29F800Bx8     0x0058  // MX29F800B used as 8 bit device
+#define MX29F800Tx8     0x00D6  // MX29F800B used as 8 bit device
+
 
 struct amd_flash_info {
 	const __u16 mfr_id;
@@ -248,6 +253,30 @@ static const struct amd_flash_info jedec
                           ERASEINFO(0x08000,2),
 			  ERASEINFO(0x02000,8)
                 }
+         }, {
+		mfr_id: MANUFACTURER_MACRONIX,
+		dev_id: MX29F800Bx8,
+		name: "Macronix MX29F800B - 8bit access",
+		DevSize: SIZE_1MiB,
+//		CmdSet:	P_ID_AMD_STD,
+		NumEraseRegions: 4,
+		regions: {ERASEINFO(0x04000,1),
+			  ERASEINFO(0x02000,2),
+			  ERASEINFO(0x08000,1),
+			  ERASEINFO(0x10000,15),
+		}
+	}, {
+		mfr_id: MANUFACTURER_MACRONIX,
+		dev_id: MX29F800Tx8,
+		name: "Macronix MX29F800T - 8bit access",
+		DevSize: SIZE_1MiB,
+//		CmdSet:	P_ID_AMD_STD,
+		NumEraseRegions: 4,
+		regions: {ERASEINFO(0x10000,15),
+			  ERASEINFO(0x08000,1),
+			  ERASEINFO(0x02000,2),
+			  ERASEINFO(0x04000,1)
+		}
 	} 
 };
 
--- linux.orig/drivers/mtd/maps/physmap.c
+++ linux/drivers/mtd/maps/physmap.c
@@ -85,7 +85,7 @@ int __init init_physmap(void)
 		printk("Failed to ioremap\n");
 		return -EIO;
 	}
-	mymtd = do_map_probe("cfi_probe", &physmap_map);
+	mymtd = do_map_probe("jedec_probe", &physmap_map);
 	if (mymtd) {
 		mymtd->module = THIS_MODULE;
 
--- linux.orig/drivers/mtd/mtdblock_ro.c
+++ linux/drivers/mtd/mtdblock_ro.c
@@ -47,6 +47,18 @@ MODULE_PARM(debug, "i");
 
 static int mtd_sizes[MAX_MTD_DEVICES];
 
+#ifdef CONFIG_DEVFS_FS
+#include <linux/devfs_fs_kernel.h>
+static void mtd_notify_add(struct mtd_info* mtd);
+static void mtd_notify_remove(struct mtd_info* mtd);
+static struct mtd_notifier notifier = {
+        mtd_notify_add,
+        mtd_notify_remove,
+        NULL
+};
+static devfs_handle_t devfs_dir_handle = NULL;
+static devfs_handle_t devfs_ro_handle[MAX_MTD_DEVICES];
+#endif
 
 static int mtdblock_open(struct inode *inode, struct file *file)
 {
@@ -162,7 +174,7 @@ static void mtdblock_request(RQFUNC_ARG)
 
 	 case READ:
 	 if (MTD_READ(mtd,current_request->sector<<9, 
-		      current_request->nr_sectors << 9, 
+		      current_request->current_nr_sectors << 9,
 		      &retlen, current_request->buffer) == 0)
 	    res = 1;
 	 else
@@ -184,7 +196,7 @@ static void mtdblock_request(RQFUNC_ARG)
 
 	 // Do the write
 	 if (MTD_WRITE(mtd,current_request->sector<<9, 
-		       current_request->nr_sectors << 9, 
+		       current_request->current_nr_sectors << 9,
 		       &retlen, current_request->buffer) == 0)
 	    res = 1;
 	 else
@@ -261,15 +273,53 @@ static struct block_device_operations mt
 };
 #endif
 
+#ifdef CONFIG_DEVFS_FS
+/* Notification that a new device has been added. Create the devfs entry for
+ * it. This code is only used if the read-write driver doesn't do it for us. */
+
+static void mtd_notify_add(struct mtd_info* mtd)
+{
+        char name[8];
+
+        if (!mtd || mtd->type == MTD_ABSENT)
+                return;
+
+        sprintf(name, "%d", mtd->index);
+        devfs_ro_handle[mtd->index] = devfs_register(devfs_dir_handle, name,
+                        DEVFS_FL_DEFAULT, MTD_BLOCK_MAJOR, mtd->index,
+                        S_IFBLK | S_IRUGO | S_IWUGO,
+                        &mtd_fops, NULL);
+}
+
+static void mtd_notify_remove(struct mtd_info* mtd)
+{
+        if (!mtd || mtd->type == MTD_ABSENT)
+                return;
+
+        devfs_unregister(devfs_ro_handle[mtd->index]);
+}
+#endif
+
 int __init init_mtdblock(void)
 {
 	int i;
 
+#ifdef CONFIG_DEVFS_FS
+	if (devfs_register_blkdev(MAJOR_NR,DEVICE_NAME,&mtd_fops)) {
+		printk(KERN_NOTICE "Can't allocate major number %d for Memory Technology Devices.\n",
+		       MTD_BLOCK_MAJOR);
+		return EAGAIN;
+	}
+
+	devfs_dir_handle = devfs_mk_dir(NULL, DEVICE_NAME, NULL);
+	register_mtd_user(&notifier);
+#else
 	if (register_blkdev(MAJOR_NR,DEVICE_NAME,&mtd_fops)) {
 		printk(KERN_NOTICE "Can't allocate major number %d for Memory Technology Devices.\n",
 		       MTD_BLOCK_MAJOR);
 		return -EAGAIN;
 	}
+#endif
 	
 	/* We fill it in at open() time. */
 	for (i=0; i< MAX_MTD_DEVICES; i++) {
@@ -286,7 +336,13 @@ int __init init_mtdblock(void)
 
 static void __exit cleanup_mtdblock(void)
 {
+#ifdef CONFIG_DEVFS_FS
+	unregister_mtd_user(&notifier);
+	devfs_unregister(devfs_dir_handle);
+	devfs_unregister_blkdev(MTD_BLOCK_MAJOR, DEVICE_NAME);
+#else
 	unregister_blkdev(MAJOR_NR,DEVICE_NAME);
+#endif
 	blksize_size[MAJOR_NR] = NULL;
 	blk_cleanup_queue(BLK_DEFAULT_QUEUE(MAJOR_NR));
 }
--- linux.orig/drivers/net/ne.c
+++ linux/drivers/net/ne.c
@@ -71,7 +71,7 @@ static const char version2[] =
 /* A zero-terminated list of I/O addresses to be probed at boot. */
 #ifndef MODULE
 static unsigned int netcard_portlist[] __initdata = {
-	0x300, 0x280, 0x320, 0x340, 0x360, 0x380, 0
+	0x200, 0x300, 0x280, 0x320, 0x340, 0x360, 0x380, 0
 };
 #endif
 
--- linux.orig/drivers/pcmcia/i82365.c
+++ linux/drivers/pcmcia/i82365.c
@@ -95,7 +95,12 @@ static int i365_base = 0x3e0;
 /* Should we probe at 0x3e2 for an extra ISA controller? */
 static int extra_sockets = 0;
 /* Specify a socket number to ignore */
+#ifdef CONFIG_WL11000
+static int ignore = 1;
+#else
 static int ignore = -1;
+#endif
+
 /* Bit map or list of interrupts to choose from */
 static u_int irq_mask = 0xffff;
 static int irq_list[16] = { -1 };
--- /dev/null
+++ linux/include/asm-i386/wl11000.h
@@ -0,0 +1,20 @@
+#ifndef _ASM_WL11000_H
+#define _ASM_WL11000_H
+
+#include <linux/init.h>
+
+extern spinlock_t wl11000_io_lock;
+
+void wl11000_config(void) __init;
+void wl11000_watchdog_ack(unsigned long reschedule);
+void wl11000_set_led(unsigned int state);
+
+enum {
+	WL11000_LED_RX_ON,    /* wireless activity on       */
+	WL11000_LED_RX_OFF,   /* wireless activity off      */
+	WL11000_LED_BR_ON,    /* wireless link on           */
+	WL11000_LED_BR_OFF,   /* wireless link off          */
+	WL11000_LED_BR_BLINK, /* wireless link initializing */
+};
+
+#endif /* _ASM_WL11000_H */
--- linux.orig/init/main.c
+++ linux/init/main.c
@@ -69,6 +69,10 @@ extern int irda_device_init(void);
 #include <asm/smp.h>
 #endif
 
+#ifdef CONFIG_WL11000
+#include <asm/wl11000.h>
+#endif
+
 /*
  * Versions of gcc older than that listed below may actually compile
  * and link okay, but the end product can have subtle run time bugs.
@@ -522,7 +526,9 @@ static void __init do_basic_setup(void)
 #ifdef CONFIG_TC
 	tc_init();
 #endif
-
+#ifdef CONFIG_WL11000
+        wl11000_config();
+#endif
 	/* Networking initialization needs a process context */ 
 	sock_init();
 
--- linux.orig/kernel/timer.c
+++ linux/kernel/timer.c
@@ -24,6 +24,9 @@
 #include <linux/kernel_stat.h>
 
 #include <asm/uaccess.h>
+#ifdef CONFIG_WL11000
+#include <asm/wl11000.h>
+#endif
 
 /*
  * Timekeeping variables
@@ -699,6 +702,14 @@ void timer_bh(void)
 void do_timer(struct pt_regs *regs)
 {
 	(*(unsigned long *)&jiffies)++;
+#ifdef CONFIG_WL11000
+	/* Under extreme load the prism driver appears to spend too long in
+	 * interrupts and timer bottom halves don't get run soon enough to
+	 * prevent the hardware watchdog from rebooting us.  This is a hack to
+	 * ack the watchdog on every time tick.  Eventually we want to fix the
+	 * prism driver so this isn't necessary. */
+	wl11000_watchdog_ack(0);
+#endif
 #ifndef CONFIG_SMP
 	/* SMP process accounting uses the local APIC timer */
 
--- linux.orig/net/bridge/br_stp_timer.c
+++ linux/net/bridge/br_stp_timer.c
@@ -17,6 +17,9 @@
 #include <linux/if_bridge.h>
 #include <linux/smp_lock.h>
 #include <asm/uaccess.h>
+#ifdef CONFIG_WL11000
+#include <asm/wl11000.h>
+#endif
 #include "br_private.h"
 #include "br_private_stp.h"
 
@@ -84,12 +87,20 @@ static void br_forward_delay_timer_expir
 		printk(KERN_INFO "%s: port %i(%s) entering %s state\n",
 		       p->br->dev.name, p->port_no, p->dev->name, "learning");
 
+#ifdef CONFIG_WL11000
+		wl11000_set_led(WL11000_LED_BR_BLINK);
+#endif
+
 		p->state = BR_STATE_LEARNING;
 		br_timer_set(&p->forward_delay_timer, jiffies);
 	} else if (p->state == BR_STATE_LEARNING) {
 		printk(KERN_INFO "%s: port %i(%s) entering %s state\n",
 		       p->br->dev.name, p->port_no, p->dev->name, "forwarding");
 
+#ifdef CONFIG_WL11000
+		wl11000_set_led(WL11000_LED_BR_ON);
+#endif
+
 		p->state = BR_STATE_FORWARDING;
 		if (br_is_designated_for_some_port(p->br))
 			br_topology_change_detection(p->br);
